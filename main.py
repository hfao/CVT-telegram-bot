import logging
import datetime
import pytz
import gspread
import os
import json
from time import time
from flask import Flask
from threading import Thread
from telegram import Update
from telegram.ext import Application, MessageHandler, CallbackContext, filters
from oauth2client.service_account import ServiceAccountCredentials

# ====== CACHE GOOGLE SHEET D·ªØ LI·ªÜU NH√ìM ======
GROUP_CACHE = {
    "data": [],
    "last_updated": 0
}
CACHE_TTL = 300  # gi√¢y (5 ph√∫t)

# ========== CONFIG GOOGLE SHEETS ==========
SHEET_ID = "1ASeRadkkokhqOflRETw6sGJTyJ65Y0XQi5mvFmivLnY"
SHEET_NAME = "Sheet1"

GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_CREDS_JSON")
if not GOOGLE_CREDS_JSON:
    raise ValueError("‚ùå GOOGLE_CREDS_JSON environment variable is missing!")

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials_dict = json.loads(GOOGLE_CREDS_JSON)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key(SHEET_ID).worksheet(SHEET_NAME)

def get_cached_group_data():
    now = time()
    if now - GROUP_CACHE["last_updated"] > CACHE_TTL:
        GROUP_CACHE["data"] = sheet.get_all_records()
        GROUP_CACHE["last_updated"] = now
    return GROUP_CACHE["data"]

# ========== LOGGING ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

user_states = {}


def check_office_hours() -> bool:
    tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.datetime.now(tz)
    if now.weekday() < 6:
        if (8 < now.hour < 17) or (now.hour == 8 and now.minute >= 30):
            return True
    return False


def is_group_active(group_id: int) -> bool:
    records = get_cached_group_data()
    for row in records:
        if str(row["group_id"]) == str(group_id) and str(row["active"]).lower() == "true":
            return True
    return False


def is_group_registered(group_id: int) -> bool:
    records = get_cached_group_data()
    return any(str(row["group_id"]) == str(group_id) for row in records)


async def welcome_new_member(update: Update, context: CallbackContext):
    chat = update.effective_chat
    group_id = chat.id
    group_name = chat.title or "N/A"

    if not is_group_registered(group_id):
        await update.message.reply_text(
            f"üö® BOT ƒë∆∞·ª£c th√™m v√†o nh√≥m ch∆∞a ƒëƒÉng k√Ω!\nID: `{group_id}`\nT√™n nh√≥m: {group_name}",
            parse_mode="Markdown"
        )
        return

    if not is_group_active(group_id):
        return

    for member in update.message.new_chat_members:
        if member.id == context.bot.id:
            return

        message = (
            "Xin ch√†o Qu√Ω kh√°ch.\n"
            "C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa CVT.\n"
            "N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ ho·∫∑c c√≥ b·∫•t k·ª≥ v·∫•n ƒë·ªÅ n√†o c·∫ßn trao ƒë·ªïi, "
            "vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn t·∫°i ƒë√¢y. ƒê·ªôi ng≈© t∆∞ v·∫•n s·∫Ω theo d√µi v√† ph·∫£n h·ªìi Qu√Ω kh√°ch trong th·ªùi gian s·ªõm nh·∫•t c√≥ th·ªÉ ·∫°."
        )
        await update.message.reply_text(message)


async def handle_message(update: Update, context: CallbackContext):
    msg = update.message

    if not msg or msg.from_user.is_bot:
        return

    chat_id = update.effective_chat.id
    if not is_group_active(chat_id):
        return

    # üö´ B·ªè qua m·ªçi tin nh·∫Øn b·ªã forward
    if getattr(msg, "forward_from", None) or getattr(msg, "forward_from_chat", None):
        logger.warning(f"‚ùå B·ªã ch·∫∑n: Tin nh·∫Øn forward t·ª´ user ho·∫∑c channel - {msg.text}")
        return

    # üö´ B·ªè qua c√°c tin nh·∫Øn ch·ª©a t·ª´ kh√≥a spam/qu·∫£ng c√°o
    if msg.text:
        lowered = msg.text.lower()
        spam_keywords = ["http", "t.me/", "@bot", "vpn", "@speeeedvpnbot", "free", "trial", "proxy", "telegram bot", "subscribe"]
        if any(keyword in lowered for keyword in spam_keywords):
            logger.warning(f"‚ùå B·ªã ch·∫∑n: Tin nh·∫Øn ch·ª©a spam keyword - {msg.text}")
            return

    user_id = update.message.from_user.id
    is_office_hours = check_office_hours()
    current_state = user_states.get(user_id)

    if not is_office_hours and current_state != "notified_out_of_office":
        message = (
            "üéâ Xin ch√†o Qu√Ω kh√°ch!\n"
            "C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ li√™n h·ªá v·ªõi C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT.\n"
            "Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.\n\n"
            "üïí Gi·ªù l√†m vi·ªác: 08:30 ‚Äì 17:00 (Th·ª© 2 ƒë·∫øn Th·ª© 7, kh√¥ng t√≠nh th·ªùi gian ngh·ªâ tr∆∞a)\n"
            "üóì Ch·ªß nh·∫≠t & Ng√†y l·ªÖ: Ngh·ªâ\n\n"
            "Ngo√†i gi·ªù l√†m vi·ªác, Qu√Ω kh√°ch vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn ‚Äì ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi ngay khi l√†m vi·ªác s·ªõm nh·∫•t."
        )
        await update.message.reply_text(message)
        user_states[user_id] = "notified_out_of_office"
        return

    if not is_office_hours and current_state == "notified_out_of_office":
        await update.message.reply_text(
            "üåô Hi·ªán t·∫°i, C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT ƒëang ngo√†i gi·ªù l√†m vi·ªác (08:30 ‚Äì 17:00, Th·ª© 2 ƒë·∫øn Th·ª© 7, kh√¥ng t√≠nh th·ªùi gian ngh·ªâ tr∆∞a).\n"
            "Qu√Ω kh√°ch vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn ‚Äì ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i trong th·ªùi gian l√†m vi·ªác s·ªõm nh·∫•t.\n"
            "Tr√¢n tr·ªçng c·∫£m ∆°n!"
        )
        return

    await send_confirmation(update)
    user_states[user_id] = "active"


async def send_confirmation(update: Update):
    msg = update.message
    text = ""

    if msg.photo:
        text = "‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√¨nh ·∫£nh c·ªßa qu√Ω kh√°ch."
    elif msg.document:
        text = f"‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c t√†i li·ªáu.\nüìÑ T√™n file: {msg.document.file_name}"
    elif msg.video:
        duration = str(datetime.timedelta(seconds=msg.video.duration))
        text = f"‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c video.\n‚è± Th·ªùi l∆∞·ª£ng: {duration}"
    elif msg.voice:
        duration = str(datetime.timedelta(seconds=msg.voice.duration))
        text = f"‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn tho·∫°i.\n‚è± Th·ªùi l∆∞·ª£ng: {duration}"
    else:
        text = "‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c·ªßa qu√Ω kh√°ch."

    follow_up = (
        "\nB·ªô ph·∫≠n D·ªãch v·ª• kh√°ch h√†ng s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.\n"
        "C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng CVT!"
    )
    await msg.reply_text(text + follow_up)


async def error(update: Update, context: CallbackContext) -> None:
    logger.warning(f'Update {update} caused error {context.error}')


async def delete_old_updates(application):
    await application.bot.delete_webhook(drop_pending_updates=True)


app = Flask('')

@app.route('/')
def home():
    return "ü§ñ CVT Bot is running!"

def run_web():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    Thread(target=run_web).start()

def main():
    token = os.environ.get("BOT_TOKEN")
    application = Application.builder().token(token).build()

    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))
    application.add_handler(MessageHandler(
        filters.TEXT | filters.PHOTO | filters.Document.ALL | filters.VIDEO | filters.VOICE,
        handle_message
    ))

    application.add_error_handler(error)

    # Xo√° update c≈© tr∆∞·ªõc khi ch·∫°y
    application.initialize()
    application.run_async(delete_old_updates(application))

    keep_alive()
    application.run_polling()

if __name__ == '__main__':
    main()
