import logging
import datetime
import pytz
import gspread
import os
import json
from time import time
from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CallbackContext, filters, CallbackQueryHandler
from oauth2client.service_account import ServiceAccountCredentials

# ==== ENV CONFIG ====
BOT_TOKEN = os.environ.get("BOT_TOKEN")
GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_CREDS_JSON")

if not BOT_TOKEN or not GOOGLE_CREDS_JSON:
    raise ValueError("Missing environment variables BOT_TOKEN or GOOGLE_CREDS_JSON")

# ==== LOGGING ====
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ==== GOOGLE SHEET SETUP ====
SHEET_ID = "1ASeRadkkokhqOflRETw6sGJTyJ65Y0XQi5mvFmivLnY"
SHEET_NAME = "Sheet1"
GROUP_CACHE = {"data": [], "last_updated": 0}
CACHE_TTL = 300

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials_dict = json.loads(GOOGLE_CREDS_JSON)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key(SHEET_ID).worksheet(SHEET_NAME)

# ==== CONSTANTS ====
INTERNAL_USERS_ID = [7934716459, 7985186615, 6129180120, 6278235756]
user_states = {}
conversation_last_message_time = {}
conversation_handlers = {}
MAX_IDLE_TIME = 1800

# ==== FLASK KEEP ALIVE ====
app = Flask('')
@app.route('/')
def home(): return "CVT bot is live."
def run_web(): app.run(host='0.0.0.0', port=8080)
def keep_alive(): Thread(target=run_web).start()

# ==== TIME CHECK ====
def check_office_hours():
    now = datetime.datetime.now(pytz.timezone('Asia/Ho_Chi_Minh'))
    return now.weekday() < 6 and (now.hour > 8 or (now.hour == 8 and now.minute >= 30)) and now.hour < 17

def get_time_slot():
    now = datetime.datetime.now(pytz.timezone('Asia/Ho_Chi_Minh'))
    if 17 <= now.hour < 19:
        return "early_evening"
    elif 19 <= now.hour <= 23:
        return "late_evening"
    return "office_hours"

# ==== GROUP STATUS ====
def get_cached_group_data():
    now = time()
    if now - GROUP_CACHE["last_updated"] > CACHE_TTL:
        GROUP_CACHE["data"] = sheet.get_all_records()
        GROUP_CACHE["last_updated"] = now
    return GROUP_CACHE["data"]

def is_group_active(group_id):
    records = get_cached_group_data()
    return any(str(row["group_id"]) == str(group_id) and str(row["active"]).lower() == "true" for row in records)

# ==== WELCOME HANDLER ====
async def welcome_new_member(update: Update, context: CallbackContext):
    for member in update.message.new_chat_members:
        if member.id == context.bot.id:
            await update.message.reply_text(
                "Xin ch√†o Qu√Ω kh√°ch.\nC·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa CVT.\nN·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ ho·∫∑c c√≥ b·∫•t k·ª≥ v·∫•n ƒë·ªÅ n√†o c·∫ßn trao ƒë·ªïi, vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn t·∫°i ƒë√¢y. ƒê·ªôi ng≈© t∆∞ v·∫•n s·∫Ω theo d√µi v√† ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t c√≥ th·ªÉ ·∫°."
            )

# ==== HANDLE MESSAGE ====
async def handle_message(update: Update, context: CallbackContext):
    msg = update.message
    chat_id = msg.chat.id
    user_id = msg.from_user.id

    if not msg or msg.from_user.is_bot or not is_group_active(chat_id):
        return

    if hasattr(msg, "forward_from") or hasattr(msg, "forward_from_chat"):
        return

    text = msg.text.lower() if msg.text else ""
    if any(keyword in text for keyword in ["http", "t.me", "@bot", "vpn"]):
        return

    is_office = check_office_hours()
    time_slot = get_time_slot()
    state = user_states.get(user_id, None)

    conversation_last_message_time[chat_id] = time()
    if chat_id not in conversation_handlers:
        conversation_handlers[chat_id] = None

    if not is_office:
        if state == "notified_out_of_office":
            await msg.reply_text(
                "üåô Hi·ªán t·∫°i, C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT ƒëang ngo√†i gi·ªù l√†m vi·ªác (08:30 ‚Äì 17:00, Th·ª© 2 ƒë·∫øn Th·ª© 7, kh√¥ng t√≠nh th·ªùi gian ngh·ªâ tr∆∞a).\nQu√Ω kh√°ch vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn ‚Äì ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i trong th·ªùi gian l√†m vi·ªác s·ªõm nh·∫•t.\nTr√¢n tr·ªçng c·∫£m ∆°n!"
            )
        elif time_slot == "early_evening":
            await msg.reply_text(
                "üéâ Xin ch√†o Qu√Ω kh√°ch!\nC·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ li√™n h·ªá v·ªõi C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT.\nCh√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.\nüïí Gi·ªù l√†m vi·ªác: 08:30 ‚Äì 17:00 (Th·ª© 2 ƒë·∫øn Th·ª© 7)\nüóì Ch·ªß nh·∫≠t & Ng√†y l·ªÖ: Ngh·ªâ\nNgo√†i gi·ªù, Qu√Ω kh√°ch vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn."
            )
            user_states[user_id] = "notified_out_of_office"
        else:
            await msg.reply_text(
                "üåô Hi·ªán t·∫°i, CVT ƒëang ngo√†i gi·ªù l√†m vi·ªác. Vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn ‚Äì ch√∫ng t√¥i s·∫Ω li√™n h·ªá trong gi·ªù l√†m vi·ªác!"
            )
        return

    if state is None:
        await msg.reply_text(
            "Xin ch√†o Qu√Ω kh√°ch.\nC·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa CVT.\nN·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ ho·∫∑c c√≥ v·∫•n ƒë·ªÅ, vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn t·∫°i ƒë√¢y. ƒê·ªôi ng≈© s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t ·∫°."
        )
        user_states[user_id] = "active"

    if msg.document or msg.photo or msg.video or msg.voice:
        await send_file_confirmation(msg)

    if conversation_handlers[chat_id] is None:
        keyboard = [[InlineKeyboardButton("Start", callback_data=f"start_{chat_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await msg.reply_text("Ch√†o b·∫°n! Nh·∫•n n√∫t 'Start' ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán v·ªõi kh√°ch h√†ng", reply_markup=reply_markup)

# ==== FILE CONFIRMATION ====
async def send_file_confirmation(msg):
    if msg.document:
        text = f"‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c t√†i li·ªáu.\nüìÑ T√™n file: {msg.document.file_name}"
    elif msg.photo:
        text = "‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√¨nh ·∫£nh."
    elif msg.video:
        duration = str(datetime.timedelta(seconds=msg.video.duration))
        text = f"‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c video.\n‚è± Th·ªùi gian: {duration}"
    elif msg.voice:
        duration = str(datetime.timedelta(seconds=msg.voice.duration))
        text = f"‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn tho·∫°i.\n‚è± Th·ªùi gian: {duration}"
    else:
        text = "‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn."
    follow_up = "\nB·ªô ph·∫≠n D·ªãch v·ª• kh√°ch h√†ng s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.\nC·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng CVT!"
    await msg.reply_text(text + follow_up)

# ==== CALLBACK BUTTON ====
async def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    if not data.startswith("start_"):
        return
    chat_id = int(data.split("_")[1])

    conversation_handlers[chat_id] = user_id
    await query.message.reply_text(f"Nh√¢n vi√™n {query.from_user.full_name} ƒë√£ ti·∫øp nh·∫≠n tin nh·∫Øn n√†y. Cu·ªôc tr√≤ chuy·ªán s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ti·∫øp cho nh√¢n vi√™n ph·ª• tr√°ch.")

# ==== MAIN ====
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))
    application.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.ALL | filters.VIDEO | filters.VOICE, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))
    keep_alive()
    application.run_polling()

if __name__ == '__main__':
    main()
