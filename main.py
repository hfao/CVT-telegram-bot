import logging
import datetime
import pytz
from flask import Flask
from threading import Thread
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext
from telegram.ext import filters

# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)
logger = logging.getLogger(__name__)

# L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
user_states = {}

# Gi·ªù l√†m vi·ªác
def check_office_hours() -> bool:
    tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.datetime.now(tz)
    if now.weekday() < 6:  # Th·ª© 2 ƒë·∫øn Th·ª© 7
        if (8 < now.hour < 17) or (now.hour == 8 and now.minute >= 30):
            return True
    return False

# TH1: Ng∆∞·ªùi m·ªõi ƒë∆∞·ª£c th√™m v√†o nh√≥m
async def welcome_new_member(update: Update, context: CallbackContext):
    for member in update.message.new_chat_members:
        # N·∫øu ng∆∞·ªùi m·ªõi l√† ch√≠nh bot ‚Üí b·ªè qua
        if member.id == context.bot.id:
            return

        message = (
            "Xin ch√†o Qu√Ω kh√°ch.\n"
            "C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa CVT.\n"
            "N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ ho·∫∑c c√≥ b·∫•t k·ª≥ v·∫•n ƒë·ªÅ n√†o c·∫ßn trao ƒë·ªïi, vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn t·∫°i ƒë√¢y. "
            "ƒê·ªôi ng≈© t∆∞ v·∫•n s·∫Ω theo d√µi v√† ph·∫£n h·ªìi Qu√Ω kh√°ch trong th·ªùi gian s·ªõm nh·∫•t c√≥ th·ªÉ ·∫°."
        )
        await update.message.reply_text(message)

# TH2, TH3, TH4: X·ª≠ l√Ω c√°c tin nh·∫Øn ng∆∞·ªùi d√πng
async def handle_message(update: Update, context: CallbackContext):
    if not update.message or update.message.from_user.is_bot:
        return

    user_id = update.message.from_user.id
    is_office_hours = check_office_hours()
    current_state = user_states.get(user_id)

    # TH3: L·∫ßn ƒë·∫ßu g·ª≠i tin ngo√†i gi·ªù
    if not is_office_hours and current_state != "notified_out_of_office":
        message = (
            "üéâ Xin ch√†o qu√Ω kh√°ch!\n"
            "C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ li√™n h·ªá v·ªõi CVT.\n"
            "Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.\n"
            "üïê Gi·ªù l√†m vi·ªác: 8h30 ‚Äì 17h00 (Th·ª© 2 ƒë·∫øn Th·ª© 7)\n"
            "Ch·ªß nh·∫≠t v√† ng√†y l·ªÖ: Ngh·ªâ\n"
            "Trong th·ªùi gian ngo√†i gi·ªù, Qu√Ω kh√°ch v·∫´n c√≥ th·ªÉ ƒë·ªÉ l·∫°i tin nh·∫Øn ‚Äì "
            "ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi ngay khi l√†m vi·ªác tr·ªü l·∫°i."
        )
        await update.message.reply_text(message)
        user_states[user_id] = "notified_out_of_office"
        return

    # TH4: Ngo√†i gi·ªù & ƒë√£ ƒë∆∞·ª£c th√¥ng b√°o tr∆∞·ªõc ƒë√≥
    if not is_office_hours and current_state == "notified_out_of_office":
        await send_confirmation(update)
        return

    # TH2: Trong gi·ªù l√†m vi·ªác
    user_states[user_id] = "active"
    await send_confirmation(update)

# Ph·∫£n h·ªìi x√°c nh·∫≠n ƒë√£ nh·∫≠n tin nh·∫Øn / t·∫≠p tin
async def send_confirmation(update: Update):
    confirmation_message = ""

    if update.message.photo:
        confirmation_message = "‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√¨nh ·∫£nh c·ªßa qu√Ω kh√°ch."

    elif update.message.document:
        doc = update.message.document
        confirmation_message = f"‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c t√†i li·ªáu c·ªßa qu√Ω kh√°ch.\nüìÑ T√™n file: {doc.file_name}"

    elif update.message.video:
        video = update.message.video
        duration = str(datetime.timedelta(seconds=video.duration))
        confirmation_message = f"‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c video c·ªßa qu√Ω kh√°ch.\n‚è± Th·ªùi l∆∞·ª£ng: {duration}"

    elif update.message.voice:
        voice = update.message.voice
        duration = str(datetime.timedelta(seconds=voice.duration))
        confirmation_message = f"‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn tho·∫°i c·ªßa qu√Ω kh√°ch.\n‚è± Th·ªùi l∆∞·ª£ng: {duration}"

    else:
        confirmation_message = "‚úÖ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c·ªßa qu√Ω kh√°ch."

    follow_up = (
        "\nB·ªô ph·∫≠n D·ªãch v·ª• kh√°ch h√†ng s·∫Ω xem x√©t v√† ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.\n"
        "C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng v√† l·ª±a ch·ªçn d·ªãch v·ª• c·ªßa ch√∫ng t√¥i."
    )
    await update.message.reply_text(confirmation_message + follow_up)

# X·ª≠ l√Ω l·ªói
async def error(update: Update, context: CallbackContext) -> None:
    logger.warning(f'Update {update} caused error {context.error}')
    try:
        raise context.error
    except Exception as e:
        logger.exception(f"Exception while handling an update: {str(e)}")

# Ch·∫°y bot
def main():
    token = '8131925759:AAGDAQA8gojjkhLXaf-IzV0J-Heu-J2s1nI'
    application = Application.builder().token(token).build()

    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_new_member))
    application.add_handler(MessageHandler(
        filters.TEXT | filters.PHOTO | filters.Document.ALL |  filters.VIDEO | filters.VOICE,
        handle_message
    ))

    application.add_error_handler(error)
    
    # ‚úÖ G·ªçi Flask server ƒë·ªÉ gi·ªØ Replit online
    keep_alive()
    
    # ‚úÖ Kh·ªüi ƒë·ªông bot
    application.run_polling()
# === Flask server ƒë·ªÉ gi·ªØ Replit lu√¥n online ===
app = Flask('')

@app.route('/')
def home():
    return "ü§ñ CVT Bot is running!"

def run_web():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_web)
    t.start()
    
if __name__ == '__main__':
    main()
