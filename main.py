import logging
import datetime
import pytz
import gspread
import os
import json
import asyncio
from time import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CallbackContext, filters
from oauth2client.service_account import ServiceAccountCredentials

# ====== Danh s√°ch ID nh√¢n vi√™n n·ªôi b·ªô ======
INTERNAL_USERS_ID = [7934716459, 7985186615, 6129180120, 6278235756]

# ====== Tr·∫°ng th√°i cu·ªôc tr√≤ chuy·ªán ======
user_states = {}
conversation_last_message_time = {}
conversation_handlers = {}
MAX_IDLE_TIME = 300  # 5 ph√∫t

# ========== Google Sheets ==========
SHEET_ID = "1ASeRadkkokhqOflRETw6sGJTyJ65Y0XQi5mvFmivLnY"
SHEET_NAME = "Sheet1"

GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_CREDS_JSON")
if not GOOGLE_CREDS_JSON:
    raise ValueError("Missing GOOGLE_CREDS_JSON")

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials_dict = json.loads(GOOGLE_CREDS_JSON)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key(SHEET_ID).worksheet(SHEET_NAME)

# Cache group data
GROUP_CACHE = {"data": [], "last_updated": 0}
CACHE_TTL = 300

def get_cached_group_data():
    now = time()
    if now - GROUP_CACHE["last_updated"] > CACHE_TTL:
        GROUP_CACHE["data"] = sheet.get_all_records()
        GROUP_CACHE["last_updated"] = now
    return GROUP_CACHE["data"]

def is_group_active(group_id: int) -> bool:
    records = get_cached_group_data()
    for row in records:
        if str(row["group_id"]) == str(group_id) and str(row["active"]).lower() == "true":
            return True
    return False

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_office_hours():
    tz = pytz.timezone("Asia/Ho_Chi_Minh")
    now = datetime.datetime.now(tz)
    return now.weekday() < 6 and (8 < now.hour < 17 or (now.hour == 8 and now.minute >= 30))

def get_time_slot():
    tz = pytz.timezone('Asia/Ho_Chi_Minh')
    now = datetime.datetime.now(tz)
    hour = now.hour
    if 17 <= hour < 19:
        return "early_evening"
    elif 19 <= hour <= 23:
        return "late_evening"
    else:
        return "other"

async def send_file_confirmation(msg):
    if msg.document:
        text = f"""‚úÖ C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c t√†i li·ªáu.
üìÑ T√™n file: {msg.document.file_name}"""
    elif msg.photo:
        text = "‚úÖ C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√¨nh ·∫£nh."
    elif msg.video:
        duration = str(datetime.timedelta(seconds=msg.video.duration))
        text = f"""‚úÖ C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c video.
‚è± Th·ªùi gian: {duration}"""
    elif msg.voice:
        duration = str(datetime.timedelta(seconds=msg.voice.duration))
        text = f"""‚úÖ C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn tho·∫°i.
‚è± Th·ªùi gian: {duration}"""
    else:
        text = "‚úÖ C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c·ªßa Qu√Ω kh√°ch"

    follow_up = "\nB·ªô ph·∫≠n ChƒÉm s√≥c Kh√°ch h√†ng s·∫Ω xem x√©t v√† ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.\nC·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng v√† l·ª±a ch·ªçn d·ªãch v·ª• c·ªßa CVT!"
    await msg.reply_text(text + follow_up)

async def handle_message(update: Update, context: CallbackContext):
    msg = update.message
    chat_id = update.effective_chat.id
    user_id = msg.from_user.id

    if not msg or msg.from_user.is_bot or not is_group_active(chat_id):
        return

    if hasattr(msg, "forward_from") or hasattr(msg, "forward_from_chat"):
        return

    text = msg.text.lower() if msg.text else ""
    if any(keyword in text for keyword in ["http", "t.me", "@bot", "vpn"]):
        return

    is_office = check_office_hours()
    time_slot = get_time_slot()
    state = user_states.get(user_id)

    # X·ª≠ l√Ω ngo√†i gi·ªù l√†m vi·ªác
    if not is_office:
        if state == "notified_out_of_office":
            await msg.reply_text(
                "üåô Hi·ªán t·∫°i, C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT ƒëang ngo√†i gi·ªù l√†m vi·ªác (08:30 ‚Äì 17:00, Th·ª© 2 ƒë·∫øn Th·ª© 7, kh√¥ng t√≠nh th·ªùi gian ngh·ªâ tr∆∞a).\n"
                "Qu√Ω kh√°ch vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn ‚Äì ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i trong th·ªùi gian l√†m vi·ªác s·ªõm nh·∫•t.\n"
                "Tr√¢n tr·ªçng c·∫£m ∆°n!"
            )
        elif time_slot == "early_evening":
            await msg.reply_text(
                "üéâ Xin ch√†o Qu√Ω kh√°ch!\n"
                "C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ li√™n h·ªá v·ªõi C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT.\n"
                "Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.\n\n"
                "üïí Gi·ªù l√†m vi·ªác: 08:30 ‚Äì 17:00 (Th·ª© 2 ƒë·∫øn Th·ª© 7)\n"
                "üìÖ Ch·ªß nh·∫≠t & Ng√†y l·ªÖ: Ngh·ªâ\n"
                "Ngo√†i gi·ªù l√†m vi·ªác, Qu√Ω kh√°ch vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn ‚Äì ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi ngay khi l√†m vi·ªác s·ªõm nh·∫•t."
            )
            user_states[user_id] = "notified_out_of_office"
        else:
            await msg.reply_text(
                "üåô Hi·ªán t·∫°i, C√¥ng ty C·ªï ph·∫ßn T∆∞ v·∫•n v√† ƒê·∫ßu t∆∞ CVT ƒëang ngo√†i gi·ªù l√†m vi·ªác (08:30 ‚Äì 17:00, Th·ª© 2 ƒë·∫øn Th·ª© 7, kh√¥ng t√≠nh th·ªùi gian ngh·ªâ tr∆∞a).\n"
                "Qu√Ω kh√°ch vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn ‚Äì ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i trong th·ªùi gian l√†m vi·ªác s·ªõm nh·∫•t.\n"
                "Tr√¢n tr·ªçng c·∫£m ∆°n!"
            )
        return

    # Trong gi·ªù l√†m vi·ªác ‚Äì ch√†o kh√°ch
    if state is None:
        await msg.reply_text(
            "Xin ch√†o Qu√Ω kh√°ch.\n"
            "C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa CVT.\n"
            "N·∫øu Qu√Ω kh√°ch c·∫ßn h·ªó tr·ª£ ho·∫∑c c√≥ b·∫•t k·ª≥ v·∫•n ƒë·ªÅ n√†o c·∫ßn trao ƒë·ªïi, vui l√≤ng ƒë·ªÉ l·∫°i tin nh·∫Øn t·∫°i ƒë√¢y.\n"
            "ƒê·ªôi ng≈© t∆∞ v·∫•n s·∫Ω theo d√µi v√† ph·∫£n h·ªìi Qu√Ω kh√°ch trong th·ªùi gian s·ªõm nh·∫•t c√≥ th·ªÉ ·∫°."
        )
        user_states[user_id] = "active"

    # N·∫øu c√≥ t·∫≠p tin
    if msg.document or msg.photo or msg.video or msg.voice:
        await send_file_confirmation(msg)

    # C·∫≠p nh·∫≠t th·ªùi gian cu·ªëi v√† ng∆∞·ªùi x·ª≠ l√Ω
    conversation_last_message_time[chat_id] = time()
    conversation_handlers[chat_id] = user_id if user_id in INTERNAL_USERS_ID else None

async def monitor_conversations(application):
    while True:
        now = time()
        for chat_id, last_time in list(conversation_last_message_time.items()):
            if now - last_time > MAX_IDLE_TIME:
                handler_id = conversation_handlers.get(chat_id)
                if handler_id:
                    await application.bot.send_message(
                        chat_id=chat_id,
                        text=f"‚è± Nh√¢n vi√™n ƒë√£ r·ªùi cu·ªôc tr√≤ chuy·ªán. CVT xin c·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ trao ƒë·ªïi. Ch√∫ng t√¥i s·∫Ω h·ªó tr·ª£ ti·∫øp n·∫øu c·∫ßn!"
                    )
                conversation_handlers.pop(chat_id, None)
                conversation_last_message_time[chat_id] = now
        await asyncio.sleep(30)

async def main():
    token = os.environ.get("BOT_TOKEN")
    application = Application.builder().token(token).build()
    application.add_handler(MessageHandler(filters.ALL, handle_message))
    asyncio.create_task(monitor_conversations(application))
    print("‚úÖ Bot is running...")
    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
